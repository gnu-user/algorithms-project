Dijkstra

<python code>
D = {}								1
P = {}								1

for node in graph.keys():			n+1
        D[node] = -1				n
        P[node] = ""				n

D[start] = 0						1

unseen_nodes = graph.keys()			1

1. The distance and the predecessor dictionaries are initialized to unreachable and empty. The start vertex's distance is set to 0 since it is the starting location. The unseen_nodes array is initialized to contain all nodes since every node is unseen.

<python code>
while len(unseen_nodes) > 0:									n+1

    shortest = None												n
    cur_node = ''												n
    for temp_node in unseen_nodes:								sum(j)*
        if shortest == None:									sum(j-1)
            shortest = D[temp_node]								sum(1)**
            cur_node = temp_node								sum(1)
        elif D[temp_node] < shortest:							sum(j-2)
            shortest = D[temp_node]								sum(j-2)
            cur_node = temp_node								sum(j-2)

    unseen_nodes.remove(cur_node)								n

    for child_node, child_value in graph[cur_node].items():		sum(c)`
        if D[child_node] < D[node] + child_value:				sum(c-1)
            D[child_node] = D[node] + child_value				sum(m)~
            P[child_node] = cur_node							sum(m)

2. This section of the code maps out the distance between the parents and their children. This is done in order from shortest distance to largest, and because if initial conditions the start node is the last node to be checked.
*note that the summations show are from 1 to n
*Also, note that j is the current size of un_seen_nodes which will decrement each iteration
**note that the first if structure is the initial condition therefore it will only enter 1 ever time the for loop takes place
`Please note that c is the number of children that the particular node has. Since this number is completely up to the user the number of iterations can vary greatly. However since a child cannot have it's parent as a child (no recursion) c will be such that c < n and the summation of c < n^2
~Please note that m is the number of times that the condition is successful, since the condition is based on whether the child has already had a parent node pass through it. m is such that it will be m <= c at all times.

<python code>
path = []						1
node = end						1

3. Initialize the path to null and the first node to be checked to the end node

<python code>
while not (node == start):					k+1						
    if path.count(node) == 0:				k
        path.insert(0, node)				k-1
        node = P[node]						k-1
    else:									1
        break								1

path.insert(0, start)						1
return path									1

4. Search for a path to the start node from the end node. Where k is the the number of nodes need to be checked before the start node is found. Given the worse case k will be such k = n therefore k will be k <= n

The total complexity of this algorithm is:
(BIG-O) f(n) = (BIG-O) 1 + (BIG-O) 1 + (BIG-O) (n+1) + (BIG-O) n + (BIG-O) n + (BIG-O) 1 + (BIG-O) 1 + (BIG-O) (n+1) + (BIG-O) n + (BIG-O) n + (BIG-O) (sum(j)) + (BIG-O) (sum(j-1)) +
(BIG-O) (sum(1)) + (BIG-O) (sum(1)) + (BIG-O) (sum(j-2)) + (BIG-O) (sum(j-2)) + (BIG-O) (sum(j-2)) + (BIG-O) n + (BIG-O) (sum(c)) + (BIG-O) sum(c-1) + (BIG-O) (sum(m)) + (BIG-O) (sum(m)) + (BIG-O) (k+1) + (BIG-O) k + (BIG-O) (k-1) + (BIG-O) (k-1) + (BIG-O) (k-1) + (BIG-O) 1  + (BIG-O) 1 + (BIG-O) 1 + (BIG-O) 1

Since sum(1) = n, sum(j) = n(n+1)/2, sum(j-1) = n(n-1)/2, sum(j-2) = (n-1)(n-2)/2, sum(c) < n^2, sum(m) <= sum(c) and k <= n

(BIG-O) f(n) = (BIG-O) 1 + (BIG-O) 1 + (BIG-O) (n+1) + (BIG-O) n + (BIG-O) n + (BIG-O) 1 + (BIG-O) 1 + (BIG-O) (n+1) + (BIG-O) n + (BIG-O) n + (BIG-O) n(n+1)/2 + (BIG-O) n(n-1)/2 +
(BIG-O) n + (BIG-O) n + (BIG-O) (n-1)(n-2)/2 + (BIG-O) (n-1)(n-2)/2 + (BIG-O) (n-1)(n-2)/2 + (BIG-O) n + (BIG-O) (sum(c)) + (BIG-O) sum(c-1) + (BIG-O) sum(c) + (BIG-O) sum(c)+ (BIG-O) (n+1) + (BIG-O) n + (BIG-O) (n-1) + (BIG-O) (n-1) + (BIG-O) (n-1) + (BIG-O) 1  + (BIG-O) 1 + (BIG-O) 1 + (BIG-O) 1

(BIG-O) f(n) = (BIG-O) 14 + (BIG-O) 19n/2 + (BIG-O) 7n^2

Therefore:
(BIG-O) f(n) = (BIG-O) n^2